{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// our pages js where we make global variables for our pages. Here we can pass global functions to change our pages array\nconst pagesKey = 'pages';\n// create a key that the browser will use to find our array in user local storage\n\n// browser then checks to see using this turnery to see if pages json exists if it doesnt we load our own data from pages.json\n// if it does exist then we just retrieve pages information from our browser\nlet pageJson;\nlet pageStore;\nif (!localStorage.getItem(pagesKey)) {\n  pageJson = await fetch('./data/db.json', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  });\n  pageStore = await pageJson.json();\n  localStorage.setItem(pagesKey, JSON.stringify(pageStore));\n} else {\n  pageJson = localStorage.getItem(pagesKey);\n  pageStore = JSON.parse(pageJson);\n}\nconsole.log(pageJson);\n// pages store parses that information that is passed and allows us to use it.\n\nconsole.log(pageJson);\n\n// we create a save function that we call everytime to update our local storage db by calling the key and passing in\n// our json object with any changes\nfunction save() {\n  localStorage.setItem(pagesKey, JSON.stringify(pageStore));\n}\nexport default {\n  // addPages passes a page object of our new page and then pushes it to our existing Array. Save is then called to save that new\n  // array in the localStorage db this allows our page to load any changes next open as long as local storage hasnt been cleared\n  addPage(page) {\n    pageStore.push(page);\n    save();\n  },\n  // get all pages just gets all our current array\n  getAllPages() {\n    return pageStore;\n  },\n  // get single page will get a specific property from a set index\n  getSinglePage(index) {\n    if (!index) {\n      index = 0;\n    }\n    return pageStore[index];\n  },\n  // edit pages locates a specific section in the array and over writes it with any changes provided from\n  // our edit page vue\n  editPage(index, page) {\n    pageStore[index] = page;\n    // save overwrites our previous array in local storage to make sure we keep it updated for the user\n    save();\n  },\n  // remove index we just splice the index passed from the array and update our localstoreage db\n  removePage(index) {\n    pageStore.splice(index, 1);\n    save();\n  }\n};","map":{"version":3,"names":["pagesKey","pageJson","pageStore","localStorage","getItem","fetch","headers","json","setItem","JSON","stringify","parse","console","log","save","addPage","page","push","getAllPages","getSinglePage","index","editPage","removePage","splice"],"sources":["C:/xampp/htdocs/vuePractice/project-navbar-pagerouting-vue_cli/src/data.js"],"sourcesContent":["// our pages js where we make global variables for our pages. Here we can pass global functions to change our pages array\r\nconst pagesKey = 'pages';\r\n// create a key that the browser will use to find our array in user local storage\r\n\r\n// browser then checks to see using this turnery to see if pages json exists if it doesnt we load our own data from pages.json\r\n// if it does exist then we just retrieve pages information from our browser\r\nlet pageJson\r\nlet pageStore\r\n\r\nif(!localStorage.getItem(pagesKey)) {\r\n    pageJson = await fetch('./data/db.json',{\r\n        headers : { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n       }\r\n    });\r\n\r\n    pageStore = await pageJson.json();\r\n    localStorage.setItem(pagesKey,JSON.stringify(pageStore))\r\n} else {\r\n    pageJson = localStorage.getItem(pagesKey);\r\n    pageStore = JSON.parse(pageJson);\r\n}\r\nconsole.log(pageJson);\r\n// pages store parses that information that is passed and allows us to use it.\r\n\r\nconsole.log(pageJson);\r\n\r\n// we create a save function that we call everytime to update our local storage db by calling the key and passing in\r\n// our json object with any changes\r\nfunction save(){\r\n    localStorage.setItem(pagesKey,JSON.stringify(pageStore))\r\n}\r\n\r\nexport default {\r\n    // addPages passes a page object of our new page and then pushes it to our existing Array. Save is then called to save that new\r\n    // array in the localStorage db this allows our page to load any changes next open as long as local storage hasnt been cleared\r\n    addPage(page){\r\n        pageStore.push(page);\r\n\r\n        save();\r\n    },\r\n    // get all pages just gets all our current array\r\n    getAllPages(){\r\n        return pageStore ;\r\n    },\r\n    // get single page will get a specific property from a set index\r\n    getSinglePage(index){\r\n        if(!index) {\r\n            index= 0;\r\n        }\r\n        return pageStore[index];\r\n    },\r\n    // edit pages locates a specific section in the array and over writes it with any changes provided from\r\n    // our edit page vue\r\n    editPage(index, page){\r\n        pageStore[index] = page;\r\n        // save overwrites our previous array in local storage to make sure we keep it updated for the user\r\n        save();\r\n    },\r\n    // remove index we just splice the index passed from the array and update our localstoreage db\r\n    removePage(index){\r\n        pageStore.splice(index,1);\r\n        save();\r\n    }\r\n}"],"mappings":";AAAA;AACA,MAAMA,QAAQ,GAAG,OAAO;AACxB;;AAEA;AACA;AACA,IAAIC,QAAQ;AACZ,IAAIC,SAAS;AAEb,IAAG,CAACC,YAAY,CAACC,OAAO,CAACJ,QAAQ,CAAC,EAAE;EAChCC,QAAQ,GAAG,MAAMI,KAAK,CAAC,gBAAgB,EAAC;IACpCC,OAAO,EAAG;MACV,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACX;EACH,CAAC,CAAC;EAEFJ,SAAS,GAAG,MAAMD,QAAQ,CAACM,IAAI,CAAC,CAAC;EACjCJ,YAAY,CAACK,OAAO,CAACR,QAAQ,EAACS,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC,CAAC;AAC5D,CAAC,MAAM;EACHD,QAAQ,GAAGE,YAAY,CAACC,OAAO,CAACJ,QAAQ,CAAC;EACzCE,SAAS,GAAGO,IAAI,CAACE,KAAK,CAACV,QAAQ,CAAC;AACpC;AACAW,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAAC;AACrB;;AAEAW,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAAC;;AAErB;AACA;AACA,SAASa,IAAIA,CAAA,EAAE;EACXX,YAAY,CAACK,OAAO,CAACR,QAAQ,EAACS,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC,CAAC;AAC5D;AAEA,eAAe;EACX;EACA;EACAa,OAAOA,CAACC,IAAI,EAAC;IACTd,SAAS,CAACe,IAAI,CAACD,IAAI,CAAC;IAEpBF,IAAI,CAAC,CAAC;EACV,CAAC;EACD;EACAI,WAAWA,CAAA,EAAE;IACT,OAAOhB,SAAS;EACpB,CAAC;EACD;EACAiB,aAAaA,CAACC,KAAK,EAAC;IAChB,IAAG,CAACA,KAAK,EAAE;MACPA,KAAK,GAAE,CAAC;IACZ;IACA,OAAOlB,SAAS,CAACkB,KAAK,CAAC;EAC3B,CAAC;EACD;EACA;EACAC,QAAQA,CAACD,KAAK,EAAEJ,IAAI,EAAC;IACjBd,SAAS,CAACkB,KAAK,CAAC,GAAGJ,IAAI;IACvB;IACAF,IAAI,CAAC,CAAC;EACV,CAAC;EACD;EACAQ,UAAUA,CAACF,KAAK,EAAC;IACblB,SAAS,CAACqB,MAAM,CAACH,KAAK,EAAC,CAAC,CAAC;IACzBN,IAAI,CAAC,CAAC;EACV;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}