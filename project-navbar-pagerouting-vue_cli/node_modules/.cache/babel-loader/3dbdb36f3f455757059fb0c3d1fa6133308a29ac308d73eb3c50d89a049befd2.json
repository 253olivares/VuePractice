{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { unref as _unref, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, isRef as _isRef, vModelText as _vModelText, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, withModifiers as _withModifiers, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  action: \"\",\n  class: \"container mb-3\"\n};\nconst _hoisted_2 = {\n  class: \"row\"\n};\nconst _hoisted_3 = {\n  class: \"col-mb-8\"\n};\nconst _hoisted_4 = {\n  class: \"mb-3\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"\",\n  class: \"form-label\"\n}, \"Page Title\", -1);\nconst _hoisted_6 = {\n  class: \"mb-3\"\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"\",\n  class: \"form-label\"\n}, \"Page Content\", -1);\nconst _hoisted_8 = {\n  class: \"col-mb-8\"\n};\nconst _hoisted_9 = {\n  class: \"mb-3\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"\",\n  class: \"form-label\"\n}, \"Link Text\", -1);\nconst _hoisted_11 = {\n  class: \"mb-3\"\n};\nconst _hoisted_12 = {\n  class: \"form-check\"\n};\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"gridCheck1\",\n  class: \"form-check-label\"\n}, \"Published\", -1);\nconst _hoisted_14 = {\n  class: \"mb-3\"\n};\nimport { useRouter } from 'vue-router';\nimport { inject, ref } from 'vue';\n\n//Get props using $pramas in option API\n// use router allows us to redirect our page after we submit or cancel\n\nexport default {\n  __name: 'PageEdit',\n  props: ['index'],\n  setup(__props) {\n    //composite API\n    const router = useRouter();\n    // inject global bus and pages\n    const pages = inject('$pages');\n    const bus = inject('$bus');\n    //method to get props using built in property\n    const {\n      index\n    } = __props;\n    // deconstruct index from our url\n\n    let page = pages.getSinglePage(index);\n    // sets page from calling our global function which returns our select object\n\n    // we create refs that allows us to call our previous values and set them in the divs above.\n    // using v-model we can bind the input to these values and then make changes\n    let title2 = ref(page.pageTitle);\n    let content2 = ref(page.pageContent);\n    let text2 = ref(page.link.text);\n    let published2 = ref(page.published);\n    // on submit we create a new object and grab our values\n\n    function submit() {\n      let updatedPage = {\n        pageTitle: title2.value,\n        pageContent: content2.value,\n        link: {\n          text: text2.value\n        },\n        published: published2.value\n      };\n      // edit pages is then passed to update our page index and inject new array into local storage db\n      pages.editPage(index, updatedPage);\n\n      // global event listener that passes new objects and declares what parent component should be listening for\n      bus.$emit('page-updated', {\n        index,\n        updatedPage\n      });\n\n      // function to redirect us after we click submit\n      goToPagesList();\n    }\n    // delete page allows us to delete from index \n    function deletePage() {\n      pages.removePage(index);\n      bus.$emit('page-deleted', {\n        index\n      });\n      goToPagesList();\n    }\n    // go to page just redirect us without any changes\n    function goToPagesList() {\n      router.push({\n        path: '/pages'\n      });\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h4\", null, \"Edit \" + _toDisplayString(_unref(page).pageTitle), 1), _createElementVNode(\"form\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n        id: \"name\",\n        type: \"text\",\n        class: \"form-control\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _isRef(title2) ? title2.value = $event : title2 = $event)\n      }, null, 512), [[_vModelText, _unref(title2)]])]), _createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _withDirectives(_createElementVNode(\"textarea\", {\n        id: \"content\",\n        type: \"text\",\n        class: \"form-control\",\n        rows: \"5\",\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _isRef(content2) ? content2.value = $event : content2 = $event)\n      }, null, 512), [[_vModelText, _unref(content2)]])])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _withDirectives(_createElementVNode(\"input\", {\n        id: \"linktext\",\n        type: \"text\",\n        class: \"form-control\",\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _isRef(text2) ? text2.value = $event : text2 = $event)\n      }, null, 512), [[_vModelText, _unref(text2)]])]), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_withDirectives(_createElementVNode(\"input\", {\n        id: \"checkbox\",\n        type: \"checkbox\",\n        class: \"form-check-input\",\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _isRef(published2) ? published2.value = $event : published2 = $event)\n      }, null, 512), [[_vModelCheckbox, _unref(published2)]]), _hoisted_13])])])]), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"button\", {\n        class: \"btn btn-primary me-2\",\n        onClick: _withModifiers(submit, [\"prevent\"])\n      }, \" Edit \"), _createElementVNode(\"button\", {\n        class: \"btn btn-secondary me-2\",\n        onClick: _withModifiers(goToPagesList, [\"prevent\"])\n      }, \" Cancel \"), _createElementVNode(\"button\", {\n        class: \"btn btn-danger\",\n        onClick: _withModifiers(deletePage, [\"prevent\"])\n      }, \" Delete \")])])], 64);\n    };\n  }\n};","map":{"version":3,"names":["useRouter","inject","ref","router","pages","bus","index","__props","page","getSinglePage","title2","pageTitle","content2","pageContent","text2","link","text","published2","published","submit","updatedPage","value","editPage","$emit","goToPagesList","deletePage","removePage","push","path"],"sources":["C:/xampp/htdocs/vuePractice/project-navbar-pagerouting-vue_cli/src/views/PageEdit.vue"],"sourcesContent":["<template>\r\n    <h4>Edit {{ page.pageTitle }}</h4>\r\n<!-- our edit form this is pretty standard all it does it load select value from our nav selected in our previous page\r\nthen we are allows to make adjustments and if we click submit we collect information and replace index place with new information -->\r\n    <form action=\"\" class=\"container mb-3\">\r\n        <div class=\"row\">\r\n            <div class=\"col-mb-8\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"\" class=\"form-label\">Page Title</label>\r\n                    <input id=\"name\" type=\"text\" class=\"form-control\" v-model=\"title2\" />\r\n                </div>\r\n                <div class=\"mb-3\">\r\n                    <label for=\"\" class=\"form-label\">Page Content</label>\r\n                    <textarea  id=\"content\" type=\"text\" class=\"form-control\" rows=\"5\" v-model=\"content2\"></textarea>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-mb-8\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"\" class=\"form-label\">Link Text</label>\r\n                    <input id=\"linktext\" type=\"text\" class=\"form-control\" v-model=\"text2\">\r\n                </div>\r\n                <div class=\"mb-3\">\r\n                    <div class=\"form-check\">\r\n                        <input id='checkbox' type=\"checkbox\"\r\n                        class=\"form-check-input\"\r\n                        v-model=\"published2\">\r\n                        <label for=\"gridCheck1\" class=\"form-check-label\">Published</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n            <!-- @click.prevent stops our page from reloading from button clicks -->\r\n            <button class=\"btn btn-primary me-2\"\r\n            @click.prevent=\"submit\">\r\n                Edit\r\n            </button>\r\n            <button class=\"btn btn-secondary me-2\"\r\n            @click.prevent=\"goToPagesList\">\r\n                Cancel\r\n            </button>\r\n            <button class=\"btn btn-danger\"\r\n            @click.prevent=\"deletePage\">\r\n                Delete\r\n            </button>\r\n        </div>\r\n    </form>\r\n\r\n\r\n</template>\r\n\r\n<script setup>\r\n//composite API\r\nimport {useRouter} from 'vue-router';\r\nimport { inject,ref } from 'vue';\r\n\r\n//Get props using $pramas in option API\r\n// use router allows us to redirect our page after we submit or cancel\r\nconst router= useRouter();\r\n// inject global bus and pages\r\nconst pages = inject('$pages');\r\nconst bus = inject('$bus');\r\n//method to get props using built in property\r\nconst {index} = defineProps(['index']);\r\n// deconstruct index from our url\r\n\r\nlet page = pages.getSinglePage(index)\r\n// sets page from calling our global function which returns our select object\r\n\r\n// we create refs that allows us to call our previous values and set them in the divs above.\r\n// using v-model we can bind the input to these values and then make changes\r\nlet title2 = ref(page.pageTitle);\r\nlet content2 = ref(page.pageContent);\r\nlet text2 = ref(page.link.text);\r\nlet published2 = ref(page.published);\r\n// on submit we create a new object and grab our values\r\n\r\nfunction submit(){ \r\n\r\n\r\n    let updatedPage = {\r\n        pageTitle:  title2.value,\r\n            pageContent: content2.value,\r\n            link: {\r\n                text: text2.value\r\n                },\r\n            published: published2.value\r\n    }\r\n    // edit pages is then passed to update our page index and inject new array into local storage db\r\n    pages.editPage(index,updatedPage);\r\n\r\n    // global event listener that passes new objects and declares what parent component should be listening for\r\n    bus.$emit('page-updated',{\r\n        index,\r\n        updatedPage\r\n    })\r\n\r\n    // function to redirect us after we click submit\r\n    goToPagesList();\r\n}\r\n// delete page allows us to delete from index \r\nfunction deletePage() {\r\n    pages.removePage(index);\r\n\r\n    bus.$emit('page-deleted',{index});\r\n    goToPagesList();\r\n}\r\n// go to page just redirect us without any changes\r\nfunction goToPagesList(){\r\n    router.push({path:'/pages'})\r\n}\r\n\r\n</script>"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,SAAQA,SAAS,QAAO,YAAY;AACpC,SAASC,MAAM,EAACC,GAAG,QAAQ,KAAK;;AAEhC;AACA;;;;;;IALA;IAMA,MAAMC,MAAM,GAAEH,SAAS,CAAC,CAAC;IACzB;IACA,MAAMI,KAAK,GAAGH,MAAM,CAAC,QAAQ,CAAC;IAC9B,MAAMI,GAAG,GAAGJ,MAAM,CAAC,MAAM,CAAC;IAC1B;IACA,MAAM;MAACK;IAAK,CAAC,GAAGC,OAAsB;IACtC;;IAEA,IAAIC,IAAI,GAAGJ,KAAK,CAACK,aAAa,CAACH,KAAK,CAAC;IACrC;;IAEA;IACA;IACA,IAAII,MAAM,GAAGR,GAAG,CAACM,IAAI,CAACG,SAAS,CAAC;IAChC,IAAIC,QAAQ,GAAGV,GAAG,CAACM,IAAI,CAACK,WAAW,CAAC;IACpC,IAAIC,KAAK,GAAGZ,GAAG,CAACM,IAAI,CAACO,IAAI,CAACC,IAAI,CAAC;IAC/B,IAAIC,UAAU,GAAGf,GAAG,CAACM,IAAI,CAACU,SAAS,CAAC;IACpC;;IAEA,SAASC,MAAMA,CAAA,EAAE;MAGb,IAAIC,WAAW,GAAG;QACdT,SAAS,EAAGD,MAAM,CAACW,KAAK;QACpBR,WAAW,EAAED,QAAQ,CAACS,KAAK;QAC3BN,IAAI,EAAE;UACFC,IAAI,EAAEF,KAAK,CAACO;QACZ,CAAC;QACLH,SAAS,EAAED,UAAU,CAACI;MAC9B,CAAC;MACD;MACAjB,KAAK,CAACkB,QAAQ,CAAChB,KAAK,EAACc,WAAW,CAAC;;MAEjC;MACAf,GAAG,CAACkB,KAAK,CAAC,cAAc,EAAC;QACrBjB,KAAK;QACLc;MACJ,CAAC,CAAC;;MAEF;MACAI,aAAa,CAAC,CAAC;IACnB;IACA;IACA,SAASC,UAAUA,CAAA,EAAG;MAClBrB,KAAK,CAACsB,UAAU,CAACpB,KAAK,CAAC;MAEvBD,GAAG,CAACkB,KAAK,CAAC,cAAc,EAAC;QAACjB;MAAK,CAAC,CAAC;MACjCkB,aAAa,CAAC,CAAC;IACnB;IACA;IACA,SAASA,aAAaA,CAAA,EAAE;MACpBrB,MAAM,CAACwB,IAAI,CAAC;QAACC,IAAI,EAAC;MAAQ,CAAC,CAAC;IAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}