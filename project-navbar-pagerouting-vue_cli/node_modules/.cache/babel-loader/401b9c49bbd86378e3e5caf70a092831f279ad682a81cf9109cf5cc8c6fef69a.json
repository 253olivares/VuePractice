{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// our pages js where we make global variables for our pages. Here we can pass global functions to change our pages array\nconst pagesKey = 'pages';\n// create a key that the browser will use to find our array in user local storage\n\n// browser then checks to see using this turnery to see if pages json exists if it doesnt we load our own data from pages.json\n// if it does exist then we just retrieve pages information from our browser\nlet pageJson = !localStorage.getItem(pagesKey) ? await fetch('./db.json') : localStorage.getItem(pagesKey);\nlet pageStore = JSON.parse(pageJson);\n// pages store parses that information that is passed and allows us to use it.\n\nconsole.log(pageJson);\n\n// we create a save function that we call everytime to update our local storage db by calling the key and passing in\n// our json object with any changes\nfunction save() {\n  localStorage.setItem(pagesKey, JSON.stringify(pageStore));\n}\nexport default {\n  // addPages passes a page object of our new page and then pushes it to our existing Array. Save is then called to save that new\n  // array in the localStorage db this allows our page to load any changes next open as long as local storage hasnt been cleared\n  addPage(page) {\n    pageStore.push(page);\n    save();\n  },\n  // get all pages just gets all our current array\n  getAllPages() {\n    return pageStore;\n  },\n  // get single page will get a specific property from a set index\n  getSinglePage(index) {\n    return pageStore[index];\n  },\n  // edit pages locates a specific section in the array and over writes it with any changes provided from\n  // our edit page vue\n  editPage(index, page) {\n    pageStore[index] = page;\n    // save overwrites our previous array in local storage to make sure we keep it updated for the user\n    save();\n  },\n  // remove index we just splice the index passed from the array and update our localstoreage db\n  removePage(index) {\n    pageStore.splice(index, 1);\n    save();\n  }\n};","map":{"version":3,"names":["pagesKey","pageJson","localStorage","getItem","fetch","pageStore","JSON","parse","console","log","save","setItem","stringify","addPage","page","push","getAllPages","getSinglePage","index","editPage","removePage","splice"],"sources":["C:/xampp/htdocs/vuePractice/project-navbar-pagerouting-vue_cli/src/data.js"],"sourcesContent":["// our pages js where we make global variables for our pages. Here we can pass global functions to change our pages array\r\nconst pagesKey = 'pages';\r\n// create a key that the browser will use to find our array in user local storage\r\n\r\n// browser then checks to see using this turnery to see if pages json exists if it doesnt we load our own data from pages.json\r\n// if it does exist then we just retrieve pages information from our browser\r\nlet pageJson = (!localStorage.getItem(pagesKey)) ? await fetch('./db.json') : localStorage.getItem(pagesKey);\r\nlet pageStore = JSON.parse(pageJson);\r\n// pages store parses that information that is passed and allows us to use it.\r\n\r\nconsole.log(pageJson);\r\n\r\n// we create a save function that we call everytime to update our local storage db by calling the key and passing in\r\n// our json object with any changes\r\nfunction save(){\r\n    localStorage.setItem(pagesKey,JSON.stringify(pageStore))\r\n}\r\n\r\nexport default {\r\n    // addPages passes a page object of our new page and then pushes it to our existing Array. Save is then called to save that new\r\n    // array in the localStorage db this allows our page to load any changes next open as long as local storage hasnt been cleared\r\n    addPage(page){\r\n        pageStore.push(page);\r\n\r\n        save();\r\n    },\r\n    // get all pages just gets all our current array\r\n    getAllPages(){\r\n        return pageStore ;\r\n    },\r\n    // get single page will get a specific property from a set index\r\n    getSinglePage(index){\r\n        return pageStore[index];\r\n    },\r\n    // edit pages locates a specific section in the array and over writes it with any changes provided from\r\n    // our edit page vue\r\n    editPage(index, page){\r\n        pageStore[index] = page;\r\n        // save overwrites our previous array in local storage to make sure we keep it updated for the user\r\n        save();\r\n    },\r\n    // remove index we just splice the index passed from the array and update our localstoreage db\r\n    removePage(index){\r\n        pageStore.splice(index,1);\r\n        save();\r\n    }\r\n}"],"mappings":";AAAA;AACA,MAAMA,QAAQ,GAAG,OAAO;AACxB;;AAEA;AACA;AACA,IAAIC,QAAQ,GAAI,CAACC,YAAY,CAACC,OAAO,CAACH,QAAQ,CAAC,GAAI,MAAMI,KAAK,CAAC,WAAW,CAAC,GAAGF,YAAY,CAACC,OAAO,CAACH,QAAQ,CAAC;AAC5G,IAAIK,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;AACpC;;AAEAO,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;;AAErB;AACA;AACA,SAASS,IAAIA,CAAA,EAAE;EACXR,YAAY,CAACS,OAAO,CAACX,QAAQ,EAACM,IAAI,CAACM,SAAS,CAACP,SAAS,CAAC,CAAC;AAC5D;AAEA,eAAe;EACX;EACA;EACAQ,OAAOA,CAACC,IAAI,EAAC;IACTT,SAAS,CAACU,IAAI,CAACD,IAAI,CAAC;IAEpBJ,IAAI,CAAC,CAAC;EACV,CAAC;EACD;EACAM,WAAWA,CAAA,EAAE;IACT,OAAOX,SAAS;EACpB,CAAC;EACD;EACAY,aAAaA,CAACC,KAAK,EAAC;IAChB,OAAOb,SAAS,CAACa,KAAK,CAAC;EAC3B,CAAC;EACD;EACA;EACAC,QAAQA,CAACD,KAAK,EAAEJ,IAAI,EAAC;IACjBT,SAAS,CAACa,KAAK,CAAC,GAAGJ,IAAI;IACvB;IACAJ,IAAI,CAAC,CAAC;EACV,CAAC;EACD;EACAU,UAAUA,CAACF,KAAK,EAAC;IACbb,SAAS,CAACgB,MAAM,CAACH,KAAK,EAAC,CAAC,CAAC;IACzBR,IAAI,CAAC,CAAC;EACV;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}