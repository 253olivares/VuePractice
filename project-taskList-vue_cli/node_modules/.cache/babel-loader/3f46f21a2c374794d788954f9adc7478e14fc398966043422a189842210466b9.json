{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Our actual task display thjat emites toggle reminder when the user triggers the double click event \\r\\n        Then we use a ternary to display a class that shows that the task is active when our individual task reminder == 'reminder' \"), _createElementVNode(\"div\", {\n    onDblclick: _cache[1] || (_cache[1] = $event => _ctx.$emit('toggle-reminder', $props.task.id)),\n    class: _normalizeClass([$props.task.reminder ? 'reminder' : '', 'task'])\n  }, [_createCommentVNode(\" bind our task array to the component elements to our h3 and p to show our values \"), _createElementVNode(\"h3\", null, [_createTextVNode(_toDisplayString($props.task.text) + \" \", 1 /* TEXT */), _createElementVNode(\"i\", {\n    onClick: _cache[0] || (_cache[0] = $event => {\n      $options.onDelete($props.task.id);\n    }),\n    class: \"fas fa-times\"\n  })]), _createElementVNode(\"p\", null, _toDisplayString($props.task.day), 1 /* TEXT */)], 34 /* CLASS, NEED_HYDRATION */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createCommentVNode","_createElementVNode","onDblclick","_cache","$event","_ctx","$emit","$props","task","id","class","_normalizeClass","reminder","_createTextVNode","_toDisplayString","text","onClick","$options","onDelete","day"],"sources":["C:\\xampp\\htdocs\\vuePractice\\project-taskList-vue_cli\\src\\components\\task.vue"],"sourcesContent":["<template>\r\n    <!-- Our actual task display thjat emites toggle reminder when the user triggers the double click event \r\n        Then we use a ternary to display a class that shows that the task is active when our individual task reminder == 'reminder' -->\r\n    <div @dblclick=\"$emit('toggle-reminder', task.id)\" :class=\"[task.reminder ? 'reminder': '', 'task']\">\r\n        <!-- bind our task array to the component elements to our h3 and p to show our values -->\r\n        <h3>{{ task.text }} <i @click=\"onDelete(task.id);\" class=\"fas fa-times\"></i></h3>\r\n        <p>{{ task.day }}</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        // standard set up name get props from parent element and then a method that emits an delete function to our \r\n        // parent component to pass up to home vue. With it id is passed from our array id\r\n        name: 'Task',\r\n        props:{\r\n            task:Object,\r\n        },\r\n        methods:{\r\n            onDelete(id){\r\n                this.$emit('delete-task', id)\r\n            },  \r\n        },\r\n        \r\n    }\r\n</script>\r\n\r\n<style scope>\r\n\r\n.fas{\r\n    color: red;\r\n}\r\n\r\n.task{\r\n    background:#f4f4f4;\r\n    margin: 5px;\r\n    padding: 10px 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n.task.reminder{\r\n    border-left:5px solid green;\r\n}\r\n\r\n.task h3{\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n</style>"],"mappings":";;uBAAAA,mBAAA,CAAAC,SAAA,SACIC,mBAAA,gPACmI,EACnIC,mBAAA,CAIM;IAJAC,UAAQ,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,KAAK,oBAAoBC,MAAA,CAAAC,IAAI,CAACC,EAAE;IAAIC,KAAK,EAH7DC,eAAA,EAGgEJ,MAAA,CAAAC,IAAI,CAACI,QAAQ;MACrEZ,mBAAA,sFAAyF,EACzFC,mBAAA,CAAiF,aALzFY,gBAAA,CAAAC,gBAAA,CAKeP,MAAA,CAAAC,IAAI,CAACO,IAAI,IAAG,GAAC,iBAAAd,mBAAA,CAAwD;IAApDe,OAAK,EAAAb,MAAA,QAAAA,MAAA,MAAAC,MAAA;MAAEa,QAAA,CAAAC,QAAQ,CAACX,MAAA,CAAAC,IAAI,CAACC,EAAE;IAAA;IAAIC,KAAK,EAAC;QACzDT,mBAAA,CAAqB,WAAAa,gBAAA,CAAfP,MAAA,CAAAC,IAAI,CAACW,GAAG,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}