{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AddTask = _resolveComponent(\"AddTask\");\n  const _component_Tasks = _resolveComponent(\"Tasks\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Our home vue where a majority of the task work happens in here we show and hide our add task component \\r\\n        using v-if when our showAddTask value is true \"), $props.showAddTask ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" once it shows we are listening for for a addtask emit from child element ro trigger add task which is covered below \"), _createVNode(_component_AddTask, {\n    onAddTask: $options.addTask\n  }, null, 8 /* PROPS */, [\"onAddTask\"])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Task component where it displays our task by array. We can see it pass tasks in the :task attribute\\r\\n          component is also listening for the following emits from child elements toggle reminder and delete task to then \\r\\n          trigger the methods provided within\"), _createVNode(_component_Tasks, {\n    onToggleReminder: $options.toggleReminder,\n    onDeleteTask: $options.deleteTask,\n    tasks: $data.tasks\n  }, null, 8 /* PROPS */, [\"onToggleReminder\", \"onDeleteTask\", \"tasks\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["key","_createElementBlock","_Fragment","_createCommentVNode","$props","showAddTask","_hoisted_1","_createVNode","_component_AddTask","onAddTask","$options","addTask","_component_Tasks","onToggleReminder","toggleReminder","onDeleteTask","deleteTask","tasks","$data"],"sources":["C:\\xampp\\htdocs\\vuePractice\\project-taskList-vue_cli\\src\\views\\Home.vue"],"sourcesContent":["<template>\r\n  <!-- Our home vue where a majority of the task work happens in here we show and hide our add task component \r\n        using v-if when our showAddTask value is true -->\r\n\r\n     <div v-if=\"showAddTask\">\r\n      <!-- once it shows we are listening for for a addtask emit from child element ro trigger add task which is covered below -->\r\n      <AddTask @add-task=\"addTask\"></AddTask>\r\n    </div>\r\n    <!-- Task component where it displays our task by array. We can see it pass tasks in the :task attribute\r\n          component is also listening for the following emits from child elements toggle reminder and delete task to then \r\n          trigger the methods provided within-->\r\n    <Tasks @toggleReminder=\"toggleReminder\" @deleteTask=\"deleteTask\"  :tasks=\"tasks\"></Tasks>\r\n</template>\r\n\r\n<script>\r\n// importing necessary components\r\n    import Tasks from '../components/Tasks.vue'\r\n    import AddTask from '../components/AddTask.vue'\r\n\r\n    export default {\r\n      //standard export defaults\r\n        name:'Home',\r\n        //check for showAddTask prop that is always going to be a boolean and check to see if we are to be showing our add task component\r\n        props:{\r\n            showAddTask:Boolean,\r\n        },\r\n        // load our components\r\n        components: {\r\n            Tasks,\r\n            AddTask\r\n        },\r\n        // creates a blank data to start our app\r\n        data() {\r\n            return {\r\n                tasks:[]\r\n            }\r\n        },\r\n        // largest section of our code where most of the app functionality occurs\r\n        //app doesnt work without a fake rest api. this is reliant on loading our json data using fetch api \r\n        // we run a fake server to allow our application make read and writes to our text document so it can be loaded on next refresh\r\n        // or return\r\n        methods:{\r\n          // first function is delete task which takes in an id and makes sure we want to delete task\r\n          // if user accepts we run the fetch function we send a request for tasks/:set id  with a parameter to delete the api\r\n            async deleteTask(id){\r\n              if(confirm('Are you sure?')){\r\n\r\n              const res = await fetch(`api/tasks/${id}`,{\r\n              method: 'DELETE'\r\n              })\r\n              //if res return is 200 which stands for successful function\r\n              //turnery lets this filter our the task with said id from the array.\r\n              // if current array object id doesnt match provided id then we eject object from array \r\n              res.status === 200 ? (this.tasks = this.tasks.filter((task)=> task.id !==id )) : alert('Error deleting task');}\r\n            },\r\n\r\n            // function toggle reminder that runs to toggle our tasks reminder value to set from true to false \r\n            // begins by getting our task with given value we then create a const of the updates task spread all existing objects variables\r\n            // after existing variables spread we mount our new reminder value with the same object name so that json then replaced reminder\r\n            // with the newest instance\r\n            // fe fetch id to put our new task json automatically updates the values that have changed\r\n            async toggleReminder(id){\r\n\r\n              const taskToToggle = await this.fetchTask(id);\r\n\r\n              const updateTask = {...taskToToggle, reminder: !taskToToggle.reminder}\r\n\r\n              const res = await fetch( `api/tasks/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                'Content-type': 'application/json'\r\n              },\r\n              body:JSON.stringify(updateTask)\r\n              })\r\n\r\n              // after we successful update our value we grab object we then remap our array\r\n\r\n              const data = await res.json();\r\n              // we take our current task and map through the array until array id matches id that was passed at the start of the function\r\n              // once we have a match we spread the existing task and then mount the new task reminder allowing json to overwrite the old value \r\n              this.tasks = this.tasks.map((task) => task.id == id ? {...task, reminder: data.reminder} : task);\r\n            },\r\n          \r\n            //add task just takes our new object passed in the function param and posts it to our text file\r\n            //function that just appends the new task to the existing array by spreading existing objects \r\n            async addTask(task){\r\n              const res = await fetch('api/tasks',{\r\n              method: 'POST',\r\n              headers: {\r\n              'Content-type': 'application.json',\r\n              },\r\n                body: JSON.stringify(task),\r\n              })\r\n\r\n              const data = await res.json();\r\n\r\n              this.tasks = [...this.tasks, data]\r\n            },\r\n            //Fetch is also straight forward we just fetch all the data this api location feeds back\r\n            async fetchTasks(){\r\n              const res = await fetch('api/tasks');\r\n\r\n              const data = await res.json();\r\n\r\n              return data;\r\n            }, \r\n            // same as previous fetch task just with an id to specific a specific api entry point we want to access for a specific object. \r\n            async fetchTask(id){\r\n              const res = await fetch(`api/tasks/${id}`);\r\n\r\n              const data = await res.json();\r\n\r\n              return data;\r\n            }\r\n        },\r\n\r\n        // this is default function that is ran to create our task array by fetching all the objects within our text file \r\n        // calls our fetchTasks method and sits outside the object to run at first run \r\n        async created() {\r\n            this.tasks = await this.fetchTasks();\r\n        },\r\n    }\r\n</script>"],"mappings":";;EAAAA,GAAA;AAAA;;;;uBAAAC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,sKACuD,EAEzCC,MAAA,CAAAC,WAAW,I,cAAtBJ,mBAAA,CAGK,OAPVK,UAAA,GAKMH,mBAAA,yHAA4H,EAC5HI,YAAA,CAAuCC,kBAAA;IAA7BC,SAAQ,EAAEC,QAAA,CAAAC;EAAO,uC,KANjCR,mBAAA,gBAQIA,mBAAA,uRAE4C,EAC5CI,YAAA,CAAyFK,gBAAA;IAAjFC,gBAAc,EAAEH,QAAA,CAAAI,cAAc;IAAGC,YAAU,EAAEL,QAAA,CAAAM,UAAU;IAAIC,KAAK,EAAEC,KAAA,CAAAD"},"metadata":{},"sourceType":"module","externalDependencies":[]}