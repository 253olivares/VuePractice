{"ast":null,"code":"// importing necessary components\nimport Tasks from '../components/Tasks.vue';\nimport AddTask from '../components/AddTask.vue';\nexport default {\n  //standard export defaults\n  name: 'Home',\n  //check for showAddTask prop that is always going to be a boolean and check to see if we are to be showing our add task component\n  props: {\n    showAddTask: Boolean\n  },\n  // load our components\n  components: {\n    Tasks,\n    AddTask\n  },\n  // creates a blank data to start our app\n  data() {\n    return {\n      tasks: []\n    };\n  },\n  // largest section of our code where most of the app functionality occurs\n  //app doesnt work without a fake rest api. this is reliant on loading our json data using fetch api \n  // we run a fake server to allow our application make read and writes to our text document so it can be loaded on next refresh\n  // or return\n  methods: {\n    // first function is delete task which takes in an id and makes sure we want to delete task\n    // if user accepts we run the fetch function we send a request for tasks/:set id  with a parameter to delete the api\n    async deleteTask(id) {\n      if (confirm('Are you sure?')) {\n        const res = await fetch(`api/tasks/${id}`, {\n          method: 'DELETE'\n        });\n        //if res return is 200 which stands for successful function\n        //turnery lets this filter our the task with said id from the array.\n        // if current array object id doesnt match provided id then we eject object from array \n        res.status === 200 ? this.tasks = this.tasks.filter(task => task.id !== id) : alert('Error deleting task');\n      }\n    },\n    // function toggle reminder that runs to toggle our tasks reminder value to set from true to false \n    // begins by getting our task with given value we then create a const of the updates task spread all existing objects variables\n    // after existing variables spread we mount our new reminder value with the same object name so that json then replaced reminder\n    // with the newest instance\n    // fe fetch id to put our new task json automatically updates the values that have changed\n    async toggleReminder(id) {\n      const taskToToggle = await this.fetchTask(id);\n      const updateTask = {\n        ...taskToToggle,\n        reminder: !taskToToggle.reminder\n      };\n      const res = await fetch(`api/tasks/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(updateTask)\n      });\n\n      // after we successful update our value we grab object we then remap our array\n\n      const data = await res.json();\n      // we take our current task and map through the array until array id matches id that was passed at the start of the function\n      // once we have a match we spread the existing task and then mount the new task reminder allowing json to overwrite the old value \n      this.tasks = this.tasks.map(task => task.id == id ? {\n        ...task,\n        reminder: data.reminder\n      } : task);\n    },\n    //add task just takes our new object passed in the function param and posts it to our text file\n    //function that just appends the new task to the existing array by spreading existing objects \n    async addTask(task) {\n      const res = await fetch('api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application.json'\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await res.json();\n      this.tasks = [...this.tasks, data];\n    },\n    //Fetch is also straight forward we just fetch all the data this api location feeds back\n    async fetchTasks() {\n      const res = await fetch('api/tasks');\n      const data = await res.json();\n      return data;\n    },\n    // same as previous fetch task just with an id to specific a specific api entry point we want to access for a specific object. \n    async fetchTask(id) {\n      const res = await fetch(`api/tasks/${id}`);\n      const data = await res.json();\n      return data;\n    }\n  },\n  // this is default function that is ran to create our task array by fetching all the objects within our text file \n  // calls our fetchTasks method and sits outside the object to run at first run \n  async created() {\n    this.tasks = await this.fetchTasks();\n  }\n};","map":{"version":3,"names":["Tasks","AddTask","name","props","showAddTask","Boolean","components","data","tasks","methods","deleteTask","id","confirm","res","fetch","method","status","filter","task","alert","toggleReminder","taskToToggle","fetchTask","updateTask","reminder","headers","body","JSON","stringify","json","map","addTask","fetchTasks","created"],"sources":["C:\\xampp\\htdocs\\vuePractice\\project-taskList-vue_cli\\src\\views\\Home.vue"],"sourcesContent":["<template>\r\n  <!-- Our home vue where a majority of the task work happens in here we show and hide our add task component \r\n        using v-if when our showAddTask value is true -->\r\n\r\n     <div v-if=\"showAddTask\">\r\n      <!-- once it shows we are listening for for a addtask emit from child element ro trigger add task which is covered below -->\r\n      <AddTask @add-task=\"addTask\"></AddTask>\r\n    </div>\r\n    <!-- Task component where it displays our task by array. We can see it pass tasks in the :task attribute\r\n          component is also listening for the following emits from child elements toggle reminder and delete task to then \r\n          trigger the methods provided within-->\r\n    <Tasks @toggleReminder=\"toggleReminder\" @deleteTask=\"deleteTask\"  :tasks=\"tasks\"></Tasks>\r\n</template>\r\n\r\n<script>\r\n// importing necessary components\r\n    import Tasks from '../components/Tasks.vue'\r\n    import AddTask from '../components/AddTask.vue'\r\n\r\n    export default {\r\n      //standard export defaults\r\n        name:'Home',\r\n        //check for showAddTask prop that is always going to be a boolean and check to see if we are to be showing our add task component\r\n        props:{\r\n            showAddTask:Boolean,\r\n        },\r\n        // load our components\r\n        components: {\r\n            Tasks,\r\n            AddTask\r\n        },\r\n        // creates a blank data to start our app\r\n        data() {\r\n            return {\r\n                tasks:[]\r\n            }\r\n        },\r\n        // largest section of our code where most of the app functionality occurs\r\n        //app doesnt work without a fake rest api. this is reliant on loading our json data using fetch api \r\n        // we run a fake server to allow our application make read and writes to our text document so it can be loaded on next refresh\r\n        // or return\r\n        methods:{\r\n          // first function is delete task which takes in an id and makes sure we want to delete task\r\n          // if user accepts we run the fetch function we send a request for tasks/:set id  with a parameter to delete the api\r\n            async deleteTask(id){\r\n              if(confirm('Are you sure?')){\r\n\r\n              const res = await fetch(`api/tasks/${id}`,{\r\n              method: 'DELETE'\r\n              })\r\n              //if res return is 200 which stands for successful function\r\n              //turnery lets this filter our the task with said id from the array.\r\n              // if current array object id doesnt match provided id then we eject object from array \r\n              res.status === 200 ? (this.tasks = this.tasks.filter((task)=> task.id !==id )) : alert('Error deleting task');}\r\n            },\r\n\r\n            // function toggle reminder that runs to toggle our tasks reminder value to set from true to false \r\n            // begins by getting our task with given value we then create a const of the updates task spread all existing objects variables\r\n            // after existing variables spread we mount our new reminder value with the same object name so that json then replaced reminder\r\n            // with the newest instance\r\n            // fe fetch id to put our new task json automatically updates the values that have changed\r\n            async toggleReminder(id){\r\n\r\n              const taskToToggle = await this.fetchTask(id);\r\n\r\n              const updateTask = {...taskToToggle, reminder: !taskToToggle.reminder}\r\n\r\n              const res = await fetch( `api/tasks/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                'Content-type': 'application/json'\r\n              },\r\n              body:JSON.stringify(updateTask)\r\n              })\r\n\r\n              // after we successful update our value we grab object we then remap our array\r\n\r\n              const data = await res.json();\r\n              // we take our current task and map through the array until array id matches id that was passed at the start of the function\r\n              // once we have a match we spread the existing task and then mount the new task reminder allowing json to overwrite the old value \r\n              this.tasks = this.tasks.map((task) => task.id == id ? {...task, reminder: data.reminder} : task);\r\n            },\r\n          \r\n            //add task just takes our new object passed in the function param and posts it to our text file\r\n            //function that just appends the new task to the existing array by spreading existing objects \r\n            async addTask(task){\r\n              const res = await fetch('api/tasks',{\r\n              method: 'POST',\r\n              headers: {\r\n              'Content-type': 'application.json',\r\n              },\r\n                body: JSON.stringify(task),\r\n              })\r\n\r\n              const data = await res.json();\r\n\r\n              this.tasks = [...this.tasks, data]\r\n            },\r\n            //Fetch is also straight forward we just fetch all the data this api location feeds back\r\n            async fetchTasks(){\r\n              const res = await fetch('api/tasks');\r\n\r\n              const data = await res.json();\r\n\r\n              return data;\r\n            }, \r\n            // same as previous fetch task just with an id to specific a specific api entry point we want to access for a specific object. \r\n            async fetchTask(id){\r\n              const res = await fetch(`api/tasks/${id}`);\r\n\r\n              const data = await res.json();\r\n\r\n              return data;\r\n            }\r\n        },\r\n\r\n        // this is default function that is ran to create our task array by fetching all the objects within our text file \r\n        // calls our fetchTasks method and sits outside the object to run at first run \r\n        async created() {\r\n            this.tasks = await this.fetchTasks();\r\n        },\r\n    }\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}